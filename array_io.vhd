-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity array_io is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    d_o_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    d_o_ce0 : OUT STD_LOGIC;
    d_o_we0 : OUT STD_LOGIC;
    d_o_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_i_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    d_i_ce0 : OUT STD_LOGIC;
    d_i_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of array_io is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "array_io,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.625000,HLS_SYN_LAT=83841,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=168,HLS_SYN_FF=11525,HLS_SYN_LUT=15273,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (108 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (108 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (108 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (108 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (108 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (108 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (108 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (108 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (108 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (108 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_3E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101000";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_7D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011111010000";
    constant ap_const_lv32_BB8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000101110111000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00101111100000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv64_C000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_401921FB544EC384 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000011001001000011111101101010100010011101100001110000100";
    constant ap_const_lv64_3FE947AE147AE148 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111101001010001111010111000010100011110101110000101001000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_256_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_256_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_256_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fourth_order_double_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_4_ce0 : STD_LOGIC;
    signal fourth_order_double_4_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal fourth_order_double_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_5_ce0 : STD_LOGIC;
    signal fourth_order_double_5_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_6_ce0 : STD_LOGIC;
    signal fourth_order_double_6_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal fourth_order_double_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_7_ce0 : STD_LOGIC;
    signal fourth_order_double_7_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_s_ce0 : STD_LOGIC;
    signal fourth_order_double_s_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_487 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal i_fu_500_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_1619 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal random1_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s0_1_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s0_1_reg_1629 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_1_fu_723_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_1_reg_1634 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_1_fu_779_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_1_reg_1639 : STD_LOGIC_VECTOR (31 downto 0);
    signal random2_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal random2_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_460_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_1649 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_1654 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal p_Result_s_reg_1659 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal tmp_V_fu_810_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_reg_1664 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_1_fu_820_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_1_reg_1671 : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1677 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln601_fu_859_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln601_reg_1688 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_21_reg_1693 : STD_LOGIC_VECTOR (169 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal icmp_ln833_1_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1708 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_37_reg_1714 : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal trunc_ln_i_i_reg_1720 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_38_fu_927_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_38_reg_1725 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal p_Val2_13_fu_942_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_13_reg_1731 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_i_i_i_42_reg_1736 : STD_LOGIC_VECTOR (60 downto 0);
    signal Mx_zeros_V_fu_992_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_zeros_V_reg_1741 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal Mx_V_reg_1747 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal Ex_V_fu_1029_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1754 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_reg_1760 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1766 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1772 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_i_reg_1779 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal B_V_fu_1104_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1784 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_trunc_V_reg_1789 : STD_LOGIC_VECTOR (48 downto 0);
    signal sin_basis_fu_1118_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1794 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal r_V_8_fu_1139_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_8_reg_1801 : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln498_fu_1155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_reg_1808 : STD_LOGIC_VECTOR (63 downto 0);
    signal B_squared_V_reg_1825 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal fourth_order_double_10_reg_1831 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_12_reg_1836 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_11_fu_1171_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal B_third_power_V_reg_1883 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal B_fourth_power_V_reg_1888 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_22_reg_1893 : STD_LOGIC_VECTOR (58 downto 0);
    signal trunc_ln3_reg_1898 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln662_1_reg_1903 : STD_LOGIC_VECTOR (47 downto 0);
    signal fourth_order_double_14_reg_1908 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_16_reg_1913 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal tmp_23_reg_1928 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_24_fu_1306_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_24_reg_1933 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_1938 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ret_V_fu_1333_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_reg_1943 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal result_V_reg_1958 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ret_V_18_fu_1379_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_18_reg_1963 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln311_fu_1515_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_reg_1968 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal grp_scaled_fixed2ieee_fu_415_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_415_ap_done : STD_LOGIC;
    signal ret_V_19_fu_1536_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_19_reg_1973 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_20_fu_1558_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_20_reg_1978 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_455_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1983 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal p_Repl2_3_fu_1576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_3_reg_1988 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln512_fu_1588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal zext_ln71_fu_1593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_reg_1998 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_2008 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal d_i_load_reg_2013 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal grp_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_2023 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_2028 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal grp_scaled_fixed2ieee_fu_415_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_415_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_415_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal s0_0_reg_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal i_0_reg_381 : STD_LOGIC_VECTOR (9 downto 0);
    signal s1_0_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_0_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scaled_fixed2ieee_fu_415_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln635_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_434_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_437_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal grp_fu_441_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal grp_fu_448_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal shl_ln32_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln32_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_fu_518_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal b1_3_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln33_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln35_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln35_fu_550_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_572_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal b1_1_fu_556_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln39_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln39_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_612_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal b1_2_fu_602_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal s0_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_fu_622_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln42_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_fu_582_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln44_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln44_fu_649_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_fu_655_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal b2_3_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln45_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln47_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln47_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_713_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_18_fu_703_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal b2_1_fu_693_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_733_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln8_fu_743_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln50_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_769_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal b2_2_fu_759_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal xor_ln53_fu_787_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_799_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln114_1_fu_830_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_V_fu_836_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_i_i_i_fu_844_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln744_fu_863_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_20_fu_866_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_22_fu_882_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_896_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_896_p1 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_896_p2 : STD_LOGIC_VECTOR (222 downto 0);
    signal trunc_ln745_fu_933_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_937_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_23_fu_959_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_11_fu_966_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_24_fu_976_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_i_fu_984_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln114_fu_996_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1253_fu_1008_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal r_V_21_fu_1011_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal select_ln482_fu_1001_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln655_fu_1026_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1334_fu_1053_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_1056_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_1062_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_fu_1069_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1287_fu_1073_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_1077_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_6_fu_1082_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_22_fu_1087_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_1142_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_1142_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Result_25_fu_1148_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1142_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_1174_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_1174_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_1179_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_1179_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_1191_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_1203_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_1174_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_1179_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_1191_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_1203_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_1262_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1262_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_29_fu_1274_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_29_fu_1274_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_29_fu_1274_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal t1_V_fu_1249_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal rhs_V_1_fu_1294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_1_fu_1290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln657_fu_1303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_23_fu_1297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1262_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal zext_ln657_fu_1322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln657_1_fu_1330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_25_fu_1325_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln272_1_fu_1339_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_1352_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_1352_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal select_ln272_fu_1358_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_2_fu_1375_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_33_fu_1386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_27_fu_1412_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_1418_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_1456_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln271_fu_1494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln311_fu_1510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_1505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_26_fu_1390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_fu_1501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_fu_1531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_fu_1523_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_2_fu_1398_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln300_1_fu_1544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_2_fu_1550_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_3_fu_1408_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal and_ln300_1_fu_1566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_1570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_28_fu_1581_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln9_fu_1598_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln75_fu_1605_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_455_ce : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (108 downto 0);
    signal grp_fu_1191_p10 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_1203_p10 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_1262_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_1262_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_1352_p00 : STD_LOGIC_VECTOR (125 downto 0);
    signal grp_fu_896_p00 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_896_p10 : STD_LOGIC_VECTOR (222 downto 0);
    signal r_V_29_fu_1274_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_29_fu_1274_p10 : STD_LOGIC_VECTOR (59 downto 0);

    component scaled_fixed2ieee IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (62 downto 0);
        prescale : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component array_io_fadd_32nibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component array_io_fmul_32njbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component array_io_uitofp_3kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component array_io_sitofp_3lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component array_io_fptrunc_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component array_io_fpext_32ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component array_io_dadd_64nocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component array_io_dmul_64npcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component array_io_dsqrt_64qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component array_io_dlog_64nrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component array_io_mul_53nssc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (52 downto 0);
        din1 : IN STD_LOGIC_VECTOR (169 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (222 downto 0) );
    end component;


    component array_io_mux_83_1tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component array_io_mul_49nsudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component array_io_mul_52s_vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (51 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (107 downto 0) );
    end component;


    component array_io_mul_44s_wdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component array_io_mul_33nsxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component array_io_mul_63nsyd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (62 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component array_io_mux_164_zec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component array_io_ref_4oPicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component array_io_fourth_odEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component array_io_fourth_oeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component array_io_fourth_ofYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component array_io_fourth_og8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component array_io_fourth_ohbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    ref_4oPi_table_256_V_U : component array_io_ref_4oPicud
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_256_V_address0,
        ce0 => ref_4oPi_table_256_V_ce0,
        q0 => ref_4oPi_table_256_V_q0);

    fourth_order_double_4_U : component array_io_fourth_odEe
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_4_address0,
        ce0 => fourth_order_double_4_ce0,
        q0 => fourth_order_double_4_q0);

    fourth_order_double_5_U : component array_io_fourth_oeOg
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_5_address0,
        ce0 => fourth_order_double_5_ce0,
        q0 => fourth_order_double_5_q0);

    fourth_order_double_6_U : component array_io_fourth_ofYi
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_6_address0,
        ce0 => fourth_order_double_6_ce0,
        q0 => fourth_order_double_6_q0);

    fourth_order_double_7_U : component array_io_fourth_og8j
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_7_address0,
        ce0 => fourth_order_double_7_ce0,
        q0 => fourth_order_double_7_q0);

    fourth_order_double_s_U : component array_io_fourth_ohbi
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_s_address0,
        ce0 => fourth_order_double_s_ce0,
        q0 => fourth_order_double_s_q0);

    grp_scaled_fixed2ieee_fu_415 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_fu_415_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_415_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_415_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_415_ap_ready,
        in_V => result_V_reg_1958,
        prescale => ret_V_18_reg_1963,
        ap_return => grp_scaled_fixed2ieee_fu_415_ap_return);

    array_io_fadd_32nibs_U6 : component array_io_fadd_32nibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_465,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_421_p2);

    array_io_fmul_32njbC_U7 : component array_io_fmul_32njbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_470,
        din1 => ap_const_lv32_2F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_426_p2);

    array_io_uitofp_3kbM_U8 : component array_io_uitofp_3kbM
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_431_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p1);

    array_io_sitofp_3lbW_U9 : component array_io_sitofp_3lbW
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_434_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_434_p1);

    array_io_fptrunc_mb6_U10 : component array_io_fptrunc_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_437_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p1);

    array_io_fpext_32ncg_U11 : component array_io_fpext_32ncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_441_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_441_p1);

    array_io_dadd_64nocq_U12 : component array_io_dadd_64nocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_487,
        din1 => reg_480,
        ce => ap_const_logic_1,
        dout => grp_fu_444_p2);

    array_io_dmul_64npcA_U13 : component array_io_dmul_64npcA
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_448_p0,
        din1 => grp_fu_448_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_448_p2);

    array_io_dsqrt_64qcK_U14 : component array_io_dsqrt_64qcK
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => reg_487,
        ce => grp_fu_455_ce,
        dout => grp_fu_455_p2);

    array_io_dlog_64nrcU_U15 : component array_io_dlog_64nrcU
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => reg_480,
        ce => ap_const_logic_1,
        dout => grp_fu_460_p2);

    array_io_mul_53nssc4_U16 : component array_io_mul_53nssc4
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 53,
        din1_WIDTH => 170,
        dout_WIDTH => 223)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_896_p0,
        din1 => grp_fu_896_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_896_p2);

    array_io_mux_83_1tde_U17 : component array_io_mux_83_1tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_38_reg_1725,
        dout => sin_basis_fu_1118_p10);

    array_io_mul_49nsudo_U18 : component array_io_mul_49nsudo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1142_p0,
        din1 => grp_fu_1142_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1142_p2);

    array_io_mul_49nsudo_U19 : component array_io_mul_49nsudo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1174_p0,
        din1 => grp_fu_1174_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1174_p2);

    array_io_mul_49nsudo_U20 : component array_io_mul_49nsudo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1179_p0,
        din1 => grp_fu_1179_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1179_p2);

    array_io_mul_52s_vdy_U21 : component array_io_mul_52s_vdy
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 52,
        din1_WIDTH => 56,
        dout_WIDTH => 108)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fourth_order_double_10_reg_1831,
        din1 => grp_fu_1191_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1191_p2);

    array_io_mul_44s_wdI_U22 : component array_io_mul_44s_wdI
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 44,
        din1_WIDTH => 49,
        dout_WIDTH => 93)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fourth_order_double_12_reg_1836,
        din1 => grp_fu_1203_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1203_p2);

    array_io_mul_33nsxdS_U23 : component array_io_mul_33nsxdS
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 33,
        din1_WIDTH => 42,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1262_p0,
        din1 => grp_fu_1262_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1262_p2);

    array_io_mul_63nsyd2_U24 : component array_io_mul_63nsyd2
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 63,
        din1_WIDTH => 64,
        dout_WIDTH => 126)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1352_p0,
        din1 => ret_V_reg_1943,
        ce => ap_const_logic_1,
        dout => grp_fu_1352_p2);

    array_io_mux_164_zec_U25 : component array_io_mux_164_zec
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_27_fu_1412_p3,
        dout => tmp_15_fu_1418_p18);

    array_io_mux_164_zec_U26 : component array_io_mux_164_zec
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_27_fu_1412_p3,
        dout => tmp_16_fu_1456_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_scaled_fixed2ieee_fu_415_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scaled_fixed2ieee_fu_415_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                    grp_scaled_fixed2ieee_fu_415_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scaled_fixed2ieee_fu_415_ap_ready = ap_const_logic_1)) then 
                    grp_scaled_fixed2ieee_fu_415_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
                i_0_reg_381 <= i_reg_1619;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_381 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    s0_0_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
                s0_0_reg_370 <= s0_1_reg_1629;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s0_0_reg_370 <= ap_const_lv32_3E8;
            end if; 
        end if;
    end process;

    s1_0_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
                s1_0_reg_393 <= s1_1_reg_1634;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s1_0_reg_393 <= ap_const_lv32_7D0;
            end if; 
        end if;
    end process;

    s2_0_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
                s2_0_reg_404 <= s2_1_reg_1639;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s2_0_reg_404 <= ap_const_lv32_BB8;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                B_V_reg_1784 <= B_V_fu_1104_p1;
                B_trunc_V_reg_1789 <= r_V_22_fu_1087_p3(55 downto 7);
                p_Result_i_i_reg_1779 <= r_V_22_fu_1087_p3(62 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                B_fourth_power_V_reg_1888 <= grp_fu_1179_p2(97 downto 63);
                B_third_power_V_reg_1883 <= grp_fu_1174_p2(97 downto 56);
                fourth_order_double_14_reg_1908 <= fourth_order_double_7_q0;
                fourth_order_double_16_reg_1913 <= fourth_order_double_s_q0;
                p_Val2_22_reg_1893 <= fourth_order_double_4_q0;
                trunc_ln3_reg_1898 <= grp_fu_1191_p2(107 downto 52);
                trunc_ln662_1_reg_1903 <= grp_fu_1203_p2(92 downto 45);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                B_squared_V_reg_1825 <= grp_fu_1142_p2(97 downto 49);
                fourth_order_double_10_reg_1831 <= fourth_order_double_5_q0;
                fourth_order_double_12_reg_1836 <= fourth_order_double_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                Ex_V_reg_1754 <= Ex_V_fu_1029_p2;
                Mx_V_reg_1747 <= r_V_21_fu_1011_p2(123 downto 61);
                icmp_ln833_2_reg_1772 <= icmp_ln833_2_fu_1048_p2;
                icmp_ln833_reg_1766 <= icmp_ln833_fu_1043_p2;
                isNeg_reg_1760 <= Ex_V_fu_1029_p2(10 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                Mx_zeros_V_reg_1741 <= Mx_zeros_V_fu_992_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                closepath_reg_1677 <= closepath_fu_824_p2;
                p_Result_s_reg_1659 <= p_Val2_s_fu_799_p1(63 downto 63);
                tmp_V_1_reg_1671 <= tmp_V_1_fu_820_p1;
                tmp_V_reg_1664 <= p_Val2_s_fu_799_p1(62 downto 52);
                trunc_ln601_reg_1688 <= trunc_ln601_fu_859_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                d_i_load_reg_2013 <= d_i_q0;
                tmp_1_reg_2008 <= grp_fu_437_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1619 <= i_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                icmp_ln833_1_reg_1708 <= icmp_ln833_1_fu_902_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                p_Repl2_3_reg_1988 <= p_Repl2_3_fu_1576_p2;
                tmp_6_reg_1983 <= grp_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                p_Result_i_i_i_42_reg_1736 <= p_Val2_13_fu_942_p3(123 downto 63);
                p_Val2_13_reg_1731 <= p_Val2_13_fu_942_p3;
                p_Val2_38_reg_1725 <= p_Val2_38_fu_927_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                p_Val2_37_reg_1714 <= grp_fu_896_p2(166 downto 43);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                    r_V_8_reg_1801(48 downto 0) <= r_V_8_fu_1139_p1(48 downto 0);
                sin_basis_reg_1794 <= sin_basis_fu_1118_p10;
                    zext_ln498_reg_1808(7 downto 0) <= zext_ln498_fu_1155_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_494_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                random2_reg_1644 <= random2_fu_793_p2;
                s0_1_reg_1629 <= s0_1_fu_675_p2;
                s1_1_reg_1634 <= s1_1_fu_723_p4;
                s2_1_reg_1639 <= s2_1_fu_779_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_465 <= grp_fu_431_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_470 <= grp_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_475 <= grp_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_480 <= grp_fu_441_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state55))) then
                reg_487 <= grp_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                result_V_reg_1958 <= grp_fu_1352_p2(125 downto 63);
                ret_V_18_reg_1963 <= ret_V_18_fu_1379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_scaled_fixed2ieee_fu_415_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                ret_V_19_reg_1973 <= ret_V_19_fu_1536_p3;
                ret_V_20_reg_1978 <= ret_V_20_fu_1558_p3;
                select_ln311_reg_1968 <= select_ln311_fu_1515_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                ret_V_21_reg_1693 <= r_V_20_fu_866_p2(255 downto 86);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                ret_V_24_reg_1933 <= ret_V_24_fu_1306_p2;
                tmp_23_reg_1928 <= r_V_29_fu_1274_p2(59 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                ret_V_reg_1943 <= ret_V_fu_1333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                tmp_12_reg_2028 <= grp_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                tmp_22_reg_1938 <= grp_fu_1262_p2(74 downto 38);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                tmp_4_reg_1649 <= grp_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                tmp_8_reg_2023 <= grp_fu_434_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((closepath_reg_1677 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                trunc_ln_i_i_reg_1720 <= grp_fu_896_p2(169 downto 167);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                x_assign_reg_1654 <= grp_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                    zext_ln71_reg_1998(9 downto 0) <= zext_ln71_fu_1593_p1(9 downto 0);
            end if;
        end if;
    end process;
    r_V_8_reg_1801(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    zext_ln498_reg_1808(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln71_reg_1998(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln29_fu_494_p2, ap_CS_fsm_state85, grp_scaled_fixed2ieee_fu_415_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln29_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                if (((grp_scaled_fixed2ieee_fu_415_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    B_V_fu_1104_p1 <= r_V_22_fu_1087_p3(56 - 1 downto 0);
    Ex_V_fu_1029_p2 <= std_logic_vector(unsigned(select_ln482_fu_1001_p3) - unsigned(zext_ln655_fu_1026_p1));
    Mx_bits_V_1_fu_937_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(p_Val2_37_reg_1714));
    Mx_zeros_V_fu_992_p1 <= tmp_i_i_i_fu_984_p3(6 - 1 downto 0);
    add_ln114_1_fu_830_p2 <= std_logic_vector(signed(ap_const_lv11_44D) + signed(tmp_V_fu_810_p4));
    add_ln114_fu_996_p2 <= std_logic_vector(signed(ap_const_lv11_403) + signed(tmp_V_reg_1664));
    add_ln75_fu_1605_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(shl_ln9_fu_1598_p3));
    addr_V_fu_836_p3 <= 
        ap_const_lv11_4A when (closepath_fu_824_p2(0) = '1') else 
        add_ln114_1_fu_830_p2;
    and_ln300_1_fu_1566_p2 <= (icmp_ln833_reg_1766 and icmp_ln833_1_reg_1708);
    and_ln300_fu_1501_p2 <= (icmp_ln833_reg_1766 and icmp_ln833_1_reg_1708);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln29_fu_494_p2)
    begin
        if (((icmp_ln29_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln29_fu_494_p2)
    begin
        if (((icmp_ln29_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b1_1_fu_556_p4 <= xor_ln35_fu_550_p2(31 downto 25);
    b1_2_fu_602_p4 <= xor_ln39_fu_596_p2(31 downto 11);
    b1_3_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b1_fu_518_p4),32));
    b1_fu_518_p4 <= xor_ln32_fu_512_p2(31 downto 19);
    b2_1_fu_693_p4 <= xor_ln47_fu_687_p2(31 downto 25);
    b2_2_fu_759_p4 <= xor_ln50_fu_753_p2(31 downto 11);
    b2_3_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b2_fu_655_p4),32));
    b2_fu_655_p4 <= xor_ln44_fu_649_p2(31 downto 19);
    bitcast_ln512_fu_1588_p1 <= p_Result_28_fu_1581_p4;
    closepath_fu_824_p2 <= "1" when (unsigned(tmp_V_fu_810_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    d_i_address0 <= zext_ln71_fu_1593_p1(10 - 1 downto 0);

    d_i_ce0_assign_proc : process(ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            d_i_ce0 <= ap_const_logic_1;
        else 
            d_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_o_address0 <= zext_ln71_reg_1998(10 - 1 downto 0);

    d_o_ce0_assign_proc : process(ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            d_o_ce0 <= ap_const_logic_1;
        else 
            d_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_o_d0 <= grp_fu_437_p1;

    d_o_we0_assign_proc : process(ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            d_o_we0 <= ap_const_logic_1;
        else 
            d_o_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_4_address0 <= zext_ln498_reg_1808(8 - 1 downto 0);

    fourth_order_double_4_ce0_assign_proc : process(ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            fourth_order_double_4_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_5_address0 <= zext_ln498_fu_1155_p1(8 - 1 downto 0);

    fourth_order_double_5_ce0_assign_proc : process(ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            fourth_order_double_5_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_6_address0 <= zext_ln498_fu_1155_p1(8 - 1 downto 0);

    fourth_order_double_6_ce0_assign_proc : process(ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            fourth_order_double_6_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_7_address0 <= zext_ln498_reg_1808(8 - 1 downto 0);

    fourth_order_double_7_ce0_assign_proc : process(ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            fourth_order_double_7_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_s_address0 <= zext_ln498_reg_1808(8 - 1 downto 0);

    fourth_order_double_s_ce0_assign_proc : process(ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            fourth_order_double_s_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1142_p0 <= r_V_8_fu_1139_p1(49 - 1 downto 0);
    grp_fu_1142_p1 <= r_V_8_fu_1139_p1(49 - 1 downto 0);
    grp_fu_1174_p0 <= r_V_8_reg_1801(49 - 1 downto 0);
    grp_fu_1174_p1 <= r_V_11_fu_1171_p1(49 - 1 downto 0);
    grp_fu_1179_p0 <= r_V_11_fu_1171_p1(49 - 1 downto 0);
    grp_fu_1179_p1 <= r_V_11_fu_1171_p1(49 - 1 downto 0);
    grp_fu_1191_p1 <= grp_fu_1191_p10(56 - 1 downto 0);
    grp_fu_1191_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_reg_1784),108));
    grp_fu_1203_p1 <= grp_fu_1203_p10(49 - 1 downto 0);
    grp_fu_1203_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1825),93));
    grp_fu_1262_p0 <= grp_fu_1262_p00(33 - 1 downto 0);
    grp_fu_1262_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_14_reg_1908),75));
    grp_fu_1262_p1 <= grp_fu_1262_p10(42 - 1 downto 0);
    grp_fu_1262_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_third_power_V_reg_1883),75));
    grp_fu_1352_p0 <= grp_fu_1352_p00(63 - 1 downto 0);
    grp_fu_1352_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln272_1_fu_1339_p3),126));

    grp_fu_431_p0_assign_proc : process(ap_CS_fsm_state2, random1_fu_636_p2, random2_reg_1644, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_431_p0 <= random2_reg_1644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_431_p0 <= random1_fu_636_p2;
        else 
            grp_fu_431_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        grp_fu_434_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln75_fu_1605_p2),32));


    grp_fu_437_p0_assign_proc : process(reg_487, ap_CS_fsm_state93, tmp_12_reg_2028, ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            grp_fu_437_p0 <= tmp_12_reg_2028;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_fu_437_p0 <= reg_487;
        else 
            grp_fu_437_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_441_p0_assign_proc : process(reg_475, tmp_1_reg_2008, ap_CS_fsm_state95, tmp_8_reg_2023, ap_CS_fsm_state17, ap_CS_fsm_state54, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_fu_441_p0 <= tmp_8_reg_2023;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_fu_441_p0 <= tmp_1_reg_2008;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_441_p0 <= reg_475;
        else 
            grp_fu_441_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_448_p0_assign_proc : process(reg_480, tmp_4_reg_1649, tmp_6_reg_1983, ap_CS_fsm_state87, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_448_p0 <= tmp_6_reg_1983;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            grp_fu_448_p0 <= reg_480;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_448_p0 <= tmp_4_reg_1649;
        else 
            grp_fu_448_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_448_p1_assign_proc : process(bitcast_ln512_fu_1588_p1, ap_CS_fsm_state87, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_fu_448_p1 <= ap_const_lv64_3FE947AE147AE148;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_448_p1 <= bitcast_ln512_fu_1588_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_448_p1 <= ap_const_lv64_401921FB544EC384;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_448_p1 <= ap_const_lv64_C000000000000000;
        else 
            grp_fu_448_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_455_ce_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state84, ap_CS_fsm_state85, grp_scaled_fixed2ieee_fu_415_ap_done, ap_CS_fsm_state86, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or ((grp_scaled_fixed2ieee_fu_415_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            grp_fu_455_ce <= ap_const_logic_1;
        else 
            grp_fu_455_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_896_p0 <= grp_fu_896_p00(53 - 1 downto 0);
    grp_fu_896_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_22_fu_882_p3),223));
    grp_fu_896_p1 <= grp_fu_896_p10(170 - 1 downto 0);
    grp_fu_896_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_21_reg_1693),223));
    grp_scaled_fixed2ieee_fu_415_ap_start <= grp_scaled_fixed2ieee_fu_415_ap_start_reg;
    i_fu_500_p2 <= std_logic_vector(unsigned(i_0_reg_381) + unsigned(ap_const_lv10_1));
    icmp_ln29_fu_494_p2 <= "1" when (i_0_reg_381 = ap_const_lv10_280) else "0";
    icmp_ln833_1_fu_902_p2 <= "1" when (tmp_V_1_reg_1671 = ap_const_lv52_0) else "0";
    icmp_ln833_2_fu_1048_p2 <= "1" when (tmp_V_reg_1664 = ap_const_lv11_7FF) else "0";
    icmp_ln833_fu_1043_p2 <= "1" when (tmp_V_reg_1664 = ap_const_lv11_0) else "0";
        lhs_V_1_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_fu_1249_p3),64));

    or_ln300_fu_1531_p2 <= (icmp_ln833_2_reg_1772 or and_ln300_fu_1501_p2);
    or_ln311_fu_1510_p2 <= (select_ln271_fu_1494_p3 or icmp_ln833_2_reg_1772);
    p_Repl2_3_fu_1576_p2 <= (xor_ln300_fu_1570_p2 and select_ln311_reg_1968);
    
    p_Result_11_fu_966_p4_proc : process(p_Result_23_fu_959_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_11_fu_966_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_23_fu_959_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_11_fu_966_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_11_fu_966_p4_i) := p_Result_23_fu_959_p3(62-1-p_Result_11_fu_966_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_11_fu_966_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_22_fu_882_p3 <= (ap_const_lv1_1 & tmp_V_1_reg_1671);
    p_Result_23_fu_959_p3 <= (p_Result_i_i_i_42_reg_1736 & ap_const_lv1_1);
    p_Result_24_fu_976_p3 <= (ap_const_lv2_3 & p_Result_11_fu_966_p4);
    p_Result_25_fu_1148_p3 <= (sin_basis_fu_1118_p10 & p_Result_i_i_reg_1779);
    p_Result_26_fu_1390_p3 <= p_Val2_33_fu_1386_p1(63 downto 63);
    p_Result_27_fu_1412_p3 <= (p_Result_s_reg_1659 & p_Val2_38_reg_1725);
    p_Result_28_fu_1581_p4 <= ((p_Repl2_3_reg_1988 & ret_V_19_reg_1973) & ret_V_20_reg_1978);
    p_Result_i_i_i_fu_844_p4 <= addr_V_fu_836_p3(10 downto 7);
    p_Val2_13_fu_942_p3 <= 
        Mx_bits_V_1_fu_937_p2 when (trunc_ln745_fu_933_p1(0) = '1') else 
        p_Val2_37_reg_1714;
    p_Val2_33_fu_1386_p1 <= grp_scaled_fixed2ieee_fu_415_ap_return;
    p_Val2_38_fu_927_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1677(0) = '1') else 
        trunc_ln_i_i_reg_1720;
    p_Val2_s_fu_799_p1 <= x_assign_reg_1654;
    r_V_11_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1825),98));
    r_V_20_fu_866_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_256_V_q0),to_integer(unsigned('0' & zext_ln744_fu_863_p1(31-1 downto 0)))));
    r_V_21_fu_1011_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_13_reg_1731),to_integer(unsigned('0' & zext_ln1253_fu_1008_p1(31-1 downto 0)))));
    r_V_22_fu_1087_p3 <= 
        r_V_fu_1077_p2 when (isNeg_reg_1760(0) = '1') else 
        r_V_6_fu_1082_p2;
    r_V_29_fu_1274_p0 <= r_V_29_fu_1274_p00(25 - 1 downto 0);
    r_V_29_fu_1274_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_16_reg_1913),60));
    r_V_29_fu_1274_p1 <= r_V_29_fu_1274_p10(35 - 1 downto 0);
    r_V_29_fu_1274_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_fourth_power_V_reg_1888),60));
    r_V_29_fu_1274_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_29_fu_1274_p0) * unsigned(r_V_29_fu_1274_p1), 60));
    r_V_6_fu_1082_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_1747),to_integer(unsigned('0' & zext_ln1287_fu_1073_p1(31-1 downto 0)))));
    r_V_8_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_V_reg_1789),98));
    r_V_fu_1077_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1747),to_integer(unsigned('0' & zext_ln1287_fu_1073_p1(31-1 downto 0)))));
    random1_fu_636_p2 <= (xor_ln42_fu_630_p2 xor s1_fu_582_p3);
    random2_fu_793_p2 <= (xor_ln53_fu_787_p2 xor s1_1_fu_723_p4);
    ref_4oPi_table_256_V_address0 <= zext_ln635_fu_854_p1(4 - 1 downto 0);

    ref_4oPi_table_256_V_ce0_assign_proc : process(ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_18_fu_1379_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(rhs_V_2_fu_1375_p1));
    ret_V_19_fu_1536_p3 <= 
        select_ln300_fu_1523_p3 when (or_ln300_fu_1531_p2(0) = '1') else 
        tmp_V_2_fu_1398_p4;
    ret_V_20_fu_1558_p3 <= 
        select_ln300_2_fu_1550_p3 when (or_ln300_fu_1531_p2(0) = '1') else 
        tmp_V_3_fu_1408_p1;
    ret_V_23_fu_1297_p2 <= std_logic_vector(signed(rhs_V_1_fu_1294_p1) + signed(lhs_V_1_fu_1290_p1));
    ret_V_24_fu_1306_p2 <= std_logic_vector(signed(sext_ln657_fu_1303_p1) + signed(ret_V_23_fu_1297_p2));
    ret_V_25_fu_1325_p2 <= std_logic_vector(unsigned(zext_ln657_fu_1322_p1) + unsigned(ret_V_24_reg_1933));
    ret_V_fu_1333_p2 <= std_logic_vector(unsigned(zext_ln657_1_fu_1330_p1) + unsigned(ret_V_25_fu_1325_p2));
        rhs_V_1_fu_1294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_reg_1898),64));

        rhs_V_2_fu_1375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln272_fu_1358_p3),12));

    s0_1_fu_675_p2 <= (shl_ln45_fu_669_p2 xor b2_3_fu_665_p1);
    s0_fu_538_p2 <= (shl_ln33_fu_532_p2 xor b1_3_fu_528_p1);
    s1_1_fu_723_p4 <= ((tmp_19_fu_713_p4 & tmp_18_fu_703_p4) & b2_1_fu_693_p4);
    s1_fu_582_p3 <= (tmp_14_fu_572_p4 & b1_1_fu_556_p4);
    s2_1_fu_779_p3 <= (tmp_21_fu_769_p4 & b2_2_fu_759_p4);
    s2_fu_622_p3 <= (tmp_17_fu_612_p4 & b1_2_fu_602_p4);
    select_ln271_fu_1494_p3 <= 
        tmp_15_fu_1418_p18 when (sin_basis_reg_1794(0) = '1') else 
        tmp_16_fu_1456_p18;
    select_ln272_1_fu_1339_p3 <= 
        Mx_V_reg_1747 when (sin_basis_reg_1794(0) = '1') else 
        ap_const_lv63_7FFFFFFFFFFFFFFF;
    select_ln272_fu_1358_p3 <= 
        Ex_V_reg_1754 when (sin_basis_reg_1794(0) = '1') else 
        ap_const_lv11_0;
    select_ln300_2_fu_1550_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (xor_ln300_1_fu_1544_p2(0) = '1') else 
        ap_const_lv52_0;
    select_ln300_fu_1523_p3 <= 
        ap_const_lv11_3FF when (and_ln300_fu_1501_p2(0) = '1') else 
        ap_const_lv11_7FF;
    select_ln311_fu_1515_p3 <= 
        xor_ln311_fu_1505_p2 when (or_ln311_fu_1510_p2(0) = '1') else 
        p_Result_26_fu_1390_p3;
    select_ln482_fu_1001_p3 <= 
        add_ln114_fu_996_p2 when (closepath_reg_1677(0) = '1') else 
        ap_const_lv11_0;
        sext_ln1311_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1062_p3),32));

        sext_ln1334_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_reg_1754),12));

        sext_ln657_fu_1303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln662_1_reg_1903),64));

    shl_ln32_fu_506_p2 <= std_logic_vector(shift_left(unsigned(s0_0_reg_370),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    shl_ln33_fu_532_p2 <= std_logic_vector(shift_left(unsigned(s0_0_reg_370),to_integer(unsigned('0' & ap_const_lv32_C(31-1 downto 0)))));
    shl_ln35_fu_544_p2 <= std_logic_vector(shift_left(unsigned(s1_0_reg_393),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln36_fu_566_p2 <= std_logic_vector(shift_left(unsigned(s1_0_reg_393),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln39_fu_590_p2 <= std_logic_vector(shift_left(unsigned(s2_0_reg_404),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln44_fu_643_p2 <= std_logic_vector(shift_left(unsigned(s0_fu_538_p2),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    shl_ln45_fu_669_p2 <= std_logic_vector(shift_left(unsigned(s0_fu_538_p2),to_integer(unsigned('0' & ap_const_lv32_C(31-1 downto 0)))));
    shl_ln47_fu_681_p2 <= std_logic_vector(shift_left(unsigned(s1_0_reg_393),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln8_fu_743_p4 <= ((tmp_20_fu_733_p4 & b1_2_fu_602_p4) & ap_const_lv3_0);
    shl_ln9_fu_1598_p3 <= (d_i_load_reg_2013 & ap_const_lv1_0);
    sub_ln1311_fu_1056_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln1334_fu_1053_p1));
    t1_V_fu_1249_p3 <= (p_Val2_22_reg_1893 & ap_const_lv4_0);
    tmp_14_fu_572_p4 <= s1_0_reg_393(27 downto 3);
    tmp_17_fu_612_p4 <= s2_0_reg_404(14 downto 4);
    tmp_18_fu_703_p4 <= xor_ln35_fu_550_p2(31 downto 28);
    tmp_19_fu_713_p4 <= s1_0_reg_393(23 downto 3);
    tmp_20_fu_733_p4 <= s2_0_reg_404(11 downto 4);
    tmp_21_fu_769_p4 <= xor_ln39_fu_596_p2(25 downto 15);
    tmp_V_1_fu_820_p1 <= p_Val2_s_fu_799_p1(52 - 1 downto 0);
    tmp_V_2_fu_1398_p4 <= p_Val2_33_fu_1386_p1(62 downto 52);
    tmp_V_3_fu_1408_p1 <= p_Val2_33_fu_1386_p1(52 - 1 downto 0);
    tmp_V_fu_810_p4 <= p_Val2_s_fu_799_p1(62 downto 52);
    
    tmp_i_i_i_fu_984_p3_proc : process(p_Result_24_fu_976_p3)
    begin
        tmp_i_i_i_fu_984_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_24_fu_976_p3(i) = '1' then
                tmp_i_i_i_fu_984_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln601_fu_859_p1 <= addr_V_fu_836_p3(7 - 1 downto 0);
    trunc_ln745_fu_933_p1 <= p_Val2_38_fu_927_p3(1 - 1 downto 0);
    ush_fu_1062_p3 <= 
        sub_ln1311_fu_1056_p2 when (isNeg_reg_1760(0) = '1') else 
        sext_ln1334_fu_1053_p1;
    xor_ln300_1_fu_1544_p2 <= (ap_const_lv1_1 xor and_ln300_fu_1501_p2);
    xor_ln300_fu_1570_p2 <= (ap_const_lv1_1 xor and_ln300_1_fu_1566_p2);
    xor_ln311_fu_1505_p2 <= (icmp_ln833_2_reg_1772 xor ap_const_lv1_1);
    xor_ln32_fu_512_p2 <= (shl_ln32_fu_506_p2 xor s0_0_reg_370);
    xor_ln35_fu_550_p2 <= (shl_ln35_fu_544_p2 xor s1_0_reg_393);
    xor_ln39_fu_596_p2 <= (shl_ln39_fu_590_p2 xor s2_0_reg_404);
    xor_ln42_fu_630_p2 <= (s2_fu_622_p3 xor s0_fu_538_p2);
    xor_ln44_fu_649_p2 <= (shl_ln44_fu_643_p2 xor s0_fu_538_p2);
    xor_ln47_fu_687_p2 <= (shl_ln47_fu_681_p2 xor shl_ln36_fu_566_p2);
    xor_ln50_fu_753_p2 <= (shl_ln8_fu_743_p4 xor s2_fu_622_p3);
    xor_ln53_fu_787_p2 <= (s2_1_fu_779_p3 xor s0_1_fu_675_p2);
    zext_ln1253_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1741),124));
    zext_ln1287_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_fu_1069_p1),63));
    zext_ln498_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_25_fu_1148_p3),64));
    zext_ln635_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_i_fu_844_p4),64));
    zext_ln655_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1741),11));
    zext_ln657_1_fu_1330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_1928),64));
    zext_ln657_fu_1322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_reg_1938),64));
    zext_ln71_fu_1593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_381),64));
    zext_ln744_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln601_reg_1688),256));
end behav;
